module test_sponge_default_mod

    use sponge_mod
    use pfunit_mod

    implicit none

    public :: test_sponge_default

@TestCase
    type, extends(TestCase) :: test_sponge_default
        type(sponge), pointer :: m_sponge => null()
    contains
        procedure :: setUp ! overrrides generic
        procedure :: tearDown ! overrides generic
    end type test_sponge_default

contains

    subroutine setUp(this)
        class(test_sponge_default), intent(inout) :: this
        allocate(this%m_sponge)
        this%m_sponge = sponge( &
            "files_namelist.dat", &
            "gib", &
            7, &
            "O2o N1p N3n N5s O3c O3h N6r" &
        )
    end subroutine setUp

    subroutine tearDown(this)

        class(test_sponge_default), intent(inout) :: this

        ! explicitly call destructor before deallocating
        call this%m_sponge%sponge_destructor()

        deallocate(this%m_sponge)
        write(*, *) 'INFO: m_sponge deallocated'
        nullify(this%m_sponge)
        write(*, *) 'INFO: m_sponge deassociated'

    end subroutine tearDown

@Test
    subroutine test_global_size(this)
        class(test_sponge_default), intent(inout) :: this
        @assertEqual(6320, this%m_sponge%get_global_size())
    end subroutine test_global_size

@Test
    subroutine test_reindex(this)
        class(test_sponge_default), intent(inout) :: this
        ! TO DO: this should be done through a getter. But why is 'm_ridxt' not private?
        @assertEqual(1, this%m_sponge%m_ridxt(1, 1))
    end subroutine test_reindex

@Test
    subroutine test_load(this)
        class(test_sponge_default), intent(inout) :: this
        call this%m_sponge%load(1)
        ! TO DO: this should be done through a getter. But why is 'm_ridxt' not private?
        @assertEqual(231.63246154785156, this%m_sponge%m_values_dtatrc(1, 2, 1))
    end subroutine test_load

end module test_sponge_default_mod

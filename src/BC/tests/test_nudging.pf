module test_nudging_mod

    use nudging_mod
    use sponge_mod
    use pfunit_mod

    implicit none

    public :: test_nudging

@TestCase
    type, extends(TestCase) :: test_nudging
        type(sponge), pointer :: m_sponge => null()
        type(nudging), pointer :: m_nudging => null()
    contains
        procedure :: setUp ! overrrides generic
        procedure :: tearDown ! overrides generic
    end type test_nudging

contains

    subroutine setUp(this)

        class(test_nudging), intent(inout) :: this

        allocate(this%m_sponge)
        this%m_sponge = sponge("gib", "gib.nml", "files_namelist_gib.dat")

        allocate(this%m_nudging)
        this%m_nudging = nudging(this%m_sponge, "gib.nml", 51)

    end subroutine setUp

    subroutine tearDown(this)

        class(test_nudging), intent(inout) :: this

        call this%m_sponge%sponge_destructor()
        deallocate(this%m_sponge)
        write(*, *) 'INFO: m_sponge deallocated'
        nullify(this%m_sponge)
        write(*, *) 'INFO: m_sponge deassociated'

        call this%m_nudging%nudging_destructor()
        deallocate(this%m_nudging)
        write(*, *) 'INFO: m_nudging deallocated'
        nullify(this%m_nudging)
        write(*, *) 'INFO: m_nudging deassociated'

    end subroutine tearDown

@Test
    subroutine test_tracer_names(this)
        class(test_nudging), intent(inout) :: this
        @assertEqual("O2o", this%m_nudging%m_nudging_vars(1))
        @assertEqual("N1p", this%m_nudging%m_nudging_vars(2))
        @assertEqual("N3n", this%m_nudging%m_nudging_vars(3))
        @assertEqual("N5s", this%m_nudging%m_nudging_vars(4))
        @assertEqual("O3c", this%m_nudging%m_nudging_vars(5))
        @assertEqual("O3h", this%m_nudging%m_nudging_vars(6))
        @assertEqual("N6r", this%m_nudging%m_nudging_vars(7))
    end subroutine test_tracer_names

!@Test
!    subroutine test_rst_tracers(this)
!        class(test_nudging), intent(inout) :: this
!        ! TO DO: this should be done through a getter. But why is 'm_rst_tracers' not private?
!        @assertEqual(2.7777778450399637E-004, this%m_nudging%m_rst_tracers(1, 13, 2, 1))
!    end subroutine test_rst_tracers

!@Test
!    subroutine test_load(this)
!        class(test_nudging), intent(inout) :: this
!        call this%m_nudging%load(1)
!        ! TO DO: this should be done through a getter. But why is 'm_values_dtatrc' not private?
!        ! TO DO: provide a way to get the 'm_bc_no_nudging' pointer
!        !        without refering explicitly to 'm_sponge'.
!        @assertEqual(231.63246154785156, this%m_sponge%m_values_dtatrc(1, 2, 1))
!    end subroutine test_load

end module test_nudging_mod

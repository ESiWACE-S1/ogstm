module test_bc_data_year_mod

    use bc_data_mod
    use pfunit_mod

    implicit none

    public :: test_bc_data_year

@TestCase
    type, extends(TestCase) :: test_bc_data_year
        type(bc_data), pointer :: m_bc_data => null()
    contains
        procedure :: setUp ! overrrides generic
        procedure :: tearDown ! overrides generic
    end type test_bc_data_year

contains

    subroutine setUp(this)
        class(test_bc_data_year), intent(inout) :: this
        allocate(this%m_bc_data)
        this%m_bc_data = bc_data("files_namelist_gib.dat", "20170101-00:00:00", "20190101-00:00:00")
    end subroutine setUp

    subroutine tearDown(this)

        class(test_bc_data_year), intent(inout) :: this

        ! explicitly call destructor before deallocating
        call this%m_bc_data%bc_data_destructor()

        deallocate(this%m_bc_data)
        write(*, *) 'INFO: m_bc_data deallocated'
        nullify(this%m_bc_data)
        write(*, *) 'INFO: m_bc_data deassociated'

    end subroutine tearDown

@Test
    subroutine test_file_names(this)
        class(test_bc_data_year), intent(inout) :: this
        integer :: i ! counter
        do i = 0, 8, 4
            @assertEqual("BC/GIB_yyyy0215-12:00:00.nc", this%m_bc_data%get_file_by_index(i + 1))
            @assertEqual("BC/GIB_yyyy0515-12:00:00.nc", this%m_bc_data%get_file_by_index(i + 2))
            @assertEqual("BC/GIB_yyyy0815-12:00:00.nc", this%m_bc_data%get_file_by_index(i + 3))
            @assertEqual("BC/GIB_yyyy1115-12:00:00.nc", this%m_bc_data%get_file_by_index(i + 4))
        enddo
    end subroutine test_file_names

@Test
    subroutine test_extreme_intervals(this)

        class(test_bc_data_year), intent(inout) :: this
        integer :: idx

        call this%m_bc_data%set_current_interval("20170101-00:00:00")
        idx = this%m_bc_data%get_prev_idx()
        @assertEqual("BC/GIB_yyyy1115-12:00:00.nc", this%m_bc_data%get_file_by_index(idx))

        call this%m_bc_data%set_current_interval("20190101-00:00:00")
        idx = this%m_bc_data%get_next_idx()
        @assertEqual("BC/GIB_yyyy0215-12:00:00.nc", this%m_bc_data%get_file_by_index(idx))

        call this%m_bc_data%set_current_interval("20191231-00:00:00")
        idx = this%m_bc_data%get_next_idx()
        @assertEqual("BC/GIB_yyyy0215-12:00:00.nc", this%m_bc_data%get_file_by_index(idx))

    end subroutine test_extreme_intervals

@Test
    subroutine test_new_interval(this)
        class(test_bc_data_year), intent(inout) :: this
        double precision :: interpolation_factor
        interpolation_factor = this%m_bc_data%get_interpolation_factor("20170814-00:00:00")
        @assertTrue(this%m_bc_data%new_interval(), "should be new interval")
        interpolation_factor = this%m_bc_data%get_interpolation_factor("20170815-00:00:00")
        @assertFalse(this%m_bc_data%new_interval(), "should be same interval")
        interpolation_factor = this%m_bc_data%get_interpolation_factor("20170816-00:00:00")
        @assertTrue(this%m_bc_data%new_interval(), "should be new interval")
    end subroutine test_new_interval

end module test_bc_data_year_mod

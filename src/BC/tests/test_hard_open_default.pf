module test_hard_open_default_mod

    use hard_open_mod
    use pfunit_mod

    implicit none

    public :: test_hard_open_default

@TestCase
    type, extends(TestCase) :: test_hard_open_default
        type(hard_open), pointer :: m_hard_open => null()
        integer(4), dimension(6) :: m_param_var_names_idx
    contains
        procedure :: setUp ! overrrides generic
        procedure :: tearDown ! overrides generic
    end type test_hard_open_default

contains

    subroutine setUp(this)
        class(test_hard_open_default), intent(inout) :: this
        this%m_param_var_names_idx = (/ 2, 3, 1, 6, 49, 50 /)
        allocate(this%m_hard_open)
        this%m_hard_open = hard_open( &
            "files_namelist_ope.dat", &
            "ope", &
            6, &
            "N1p N3n O2o N5s O3c O3h", &
            this%m_param_var_names_idx, &
            51, &
            1, &
            600.0d0 &
        )
    end subroutine setUp

    subroutine tearDown(this)

        class(test_hard_open_default), intent(inout) :: this

        ! explicitly call destructor before deallocating
        call this%m_hard_open%hard_open_destructor()

        deallocate(this%m_hard_open)
        write(*, *) 'INFO: m_hard_open deallocated'
        nullify(this%m_hard_open)
        write(*, *) 'INFO: m_hard_open deassociated'

    end subroutine tearDown

@Test
    subroutine test_missing_tracers(this)
        class(test_hard_open_default), intent(inout) :: this
        @assertEqual(4, this%m_hard_open%m_missing_var_names_idx(1))
        @assertEqual(5, this%m_hard_open%m_missing_var_names_idx(2))
        @assertEqual(7, this%m_hard_open%m_missing_var_names_idx(3))
        @assertEqual(48, this%m_hard_open%m_missing_var_names_idx(44))
        @assertEqual(51, this%m_hard_open%m_missing_var_names_idx(45))
    end subroutine test_missing_tracers

@Test
    subroutine test_file_names(this)
        class(test_hard_open_default), intent(inout) :: this
        @assertEqual("BC/OPE_20161230-00:00:00.nc", this%m_hard_open%get_file_by_index(1))
        @assertEqual("BC/OPE_20170630-00:00:00.nc", this%m_hard_open%get_file_by_index(2))
    end subroutine test_file_names

@Test
    subroutine test_size(this)
        class(test_hard_open_default), intent(inout) :: this
        @assertEqual(32, this%m_hard_open%m_size)
    end subroutine test_size

@Test
    subroutine test_hard_open_points(this)

        class(test_hard_open_default), intent(inout) :: this

        @assertEqual(842, this%m_hard_open%m_hard_open_points(1, 1))
        @assertEqual(842, this%m_hard_open%m_hard_open_points(1, 2))
        @assertEqual(842, this%m_hard_open%m_hard_open_points(1, 32))

        @assertGreaterThanOrEqual(this%m_hard_open%m_hard_open_points(2, 1), 236)
        @assertLessThanOrEqual(this%m_hard_open%m_hard_open_points(2, 1), 238)

        @assertGreaterThanOrEqual(this%m_hard_open%m_hard_open_points(2, 2), 236)
        @assertLessThanOrEqual(this%m_hard_open%m_hard_open_points(2, 2), 238)

        @assertGreaterThanOrEqual(this%m_hard_open%m_hard_open_points(2, 32), 236)
        @assertLessThanOrEqual(this%m_hard_open%m_hard_open_points(2, 32), 238)

    end subroutine test_hard_open_points

@Test
    subroutine test_neighbors(this)

        class(test_hard_open_default), intent(inout) :: this

        @assertEqual(841, this%m_hard_open%m_neighbors(1, 1))
        @assertEqual(841, this%m_hard_open%m_neighbors(1, 2))
        @assertEqual(841, this%m_hard_open%m_neighbors(1, 32))

        @assertGreaterThanOrEqual(this%m_hard_open%m_neighbors(2, 1), 236)
        @assertLessThanOrEqual(this%m_hard_open%m_neighbors(2, 1), 238)

        @assertGreaterThanOrEqual(this%m_hard_open%m_neighbors(2, 2), 236)
        @assertLessThanOrEqual(this%m_hard_open%m_neighbors(2, 2), 238)

        @assertGreaterThanOrEqual(this%m_hard_open%m_neighbors(2, 32), 236)
        @assertLessThanOrEqual(this%m_hard_open%m_neighbors(2, 32), 238)

    end subroutine test_neighbors

@Test
    subroutine test_values(this)

        class(test_hard_open_default), intent(inout) :: this
        integer :: prev_idx, next_idx
        double precision :: weight
        logical :: new_data

        ! emulate update method after a few timesteps
        weight = this%m_hard_open%get_interpolation_factor('20170101-00:00:00', new_data)
        prev_idx = this%m_hard_open%get_prev_idx()
        call this%m_hard_open%load(prev_idx)
        call this%m_hard_open%swap()
        next_idx = this%m_hard_open%get_next_idx()
        call this%m_hard_open%load(next_idx)
        weight = this%m_hard_open%get_interpolation_factor('20170101-00:50:00', new_data)
        call this%m_hard_open%actualize(weight)

        @assertEqual(10.0, this%m_hard_open%m_values(1, 1))
        @assertEqual(10.0, this%m_hard_open%m_values(2, 1))
        @assertEqual(10.0, this%m_hard_open%m_values(32, 1))

        @assertEqual(11.0, this%m_hard_open%m_values(1, 2))
        @assertEqual(11.0, this%m_hard_open%m_values(2, 2))
        @assertEqual(11.0, this%m_hard_open%m_values(32, 2))

        @assertEqual(12.0, this%m_hard_open%m_values(1, 3))
        @assertEqual(12.0, this%m_hard_open%m_values(2, 3))
        @assertEqual(12.0, this%m_hard_open%m_values(32, 3))

        @assertEqual(13.0, this%m_hard_open%m_values(1, 4))
        @assertEqual(13.0, this%m_hard_open%m_values(2, 4))
        @assertEqual(13.0, this%m_hard_open%m_values(32, 4))

        @assertEqual(14.0, this%m_hard_open%m_values(1, 5))
        @assertEqual(14.0, this%m_hard_open%m_values(2, 5))
        @assertEqual(14.0, this%m_hard_open%m_values(32, 5))

        @assertEqual(15.0, this%m_hard_open%m_values(1, 6))
        @assertEqual(15.0, this%m_hard_open%m_values(2, 6))
        @assertEqual(15.0, this%m_hard_open%m_values(32, 6))
    
    end subroutine test_values

end module test_hard_open_default_mod
